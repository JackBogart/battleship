{"version":3,"file":"main.b242e2c7c794422625c5.js","mappings":"mBAAA,MAAMA,EAAc,GACdC,EAAiB,GACjBC,EAAa,CACjB,UACA,aACA,YACA,YACA,eCPWC,EAAaC,OAAOC,OAAO,CACtCC,MAAOC,OAAO,SACdC,SAAUD,OAAO,cAGbE,EAAWA,CAACC,EAAMC,KAAW,CAAGD,OAAMC,WAE/BC,EAAWR,OAAOC,OAAO,CACpCQ,QAASJ,EAAS,UAAW,GAC7BK,WAAYL,EAAS,aAAc,GACnCM,UAAWN,EAAS,YAAa,GACjCO,UAAWP,EAAS,YAAa,GACjCQ,YAAaR,EAAS,cAAe,KAG1BS,EAAed,OAAOC,OAAO,CACxCc,QAASZ,OAAO,WAChBa,OAAQb,OAAO,UACfc,IAAKd,OAAO,SAGDe,EAAgBlB,OAAOC,OAAO,CACzCkB,MAAO,iBACPC,KAAM,OACNC,SAAU,aCxBL,SAASC,EAAaC,GAC3B,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,EACpC,CAEO,SAASI,EAAaC,GAC3B,MAAMC,EAAgBD,EAAME,QAG5B,IAAK,IAAIC,EAAIF,EAActB,OAAS,EAAGwB,EAAI,EAAGA,IAAK,CACjD,MAAMC,EAAIV,EAAaS,EAAI,IAC1BF,EAAcE,GAAIF,EAAcG,IAAM,CAACH,EAAcG,GAAIH,EAAcE,GAC1E,CAEA,OAAOF,CACT,CCTO,SAASI,EAAaC,EAAMnC,GACjC,MAAMoC,ECHD,WACL,IAAIC,EAAW,CAAC,EAEZC,EAAQ,IAAIC,MAAM1C,GACnB2C,KAAK,MACLC,KAAI,IAAM,IAAIF,MAAMzC,GAAgB0C,KAAK,QAE5C,MAAME,EAAY,IAAIH,MAAM1C,GACzB2C,KAAK,MACLC,KAAI,IAAM,IAAIF,MAAMzC,GAAgB0C,KAAKzB,EAAaC,WAwHzD,MAAO,CACL2B,YARkB,WAClB,OAAO1C,OAAO2C,OAAOP,GAAUQ,QAAO,CAACC,EAAOC,KAC5CD,EAAME,KAAKD,EAAKE,MACTH,IACN,GACL,EAIEI,QAxHc,SAAiBC,EAAKC,GACpC,OAAOd,EAAMa,GAAKC,EACpB,EAuHEC,QAxFc,SAAiBJ,EAAME,EAAKC,EAAKE,GAC/C,MAAMC,EAAaN,EAAKO,YAExB,IAAK,IAAIxB,EAAI,EAAGA,EAAIuB,EAAYvB,IAAK,CACnC,MACMyB,EAAaH,EAAaF,EAAMA,EAAMpB,EAE5CM,EAHmBgB,EAAaH,EAAMnB,EAAImB,GAGxBM,GAAcR,CAClC,CAEAZ,EAASY,EAAKS,WAAa,CACzBT,OACAE,MACAC,MACAE,aAEJ,EAyEEK,aAvEmB,WACnB,OAAOjB,EAAUD,KAAKU,GAAQ,IAAIA,IACpC,EAsEES,YApEkB,SAAqBT,EAAKC,GAC5C,OAAOV,EAAUS,GAAKC,EACxB,EAmEES,cAjEoB,SAAuBV,EAAKC,GAC3Cd,EAAMa,GAAKC,IAGdd,EAAMa,GAAKC,GAAKU,MAChBpB,EAAUS,GAAKC,GAAOrC,EAAaG,KAHnCwB,EAAUS,GAAKC,GAAOrC,EAAaE,MAKvC,EA2DE8C,YAzDkB,WAClB,OAAO9D,OAAO2C,OAAOP,GAAU2B,OAAOC,GAAUA,EAAMhB,KAAKiB,UAC7D,EAwDEC,iBA1HuB,SACvBlB,EACAE,EACAC,EACAE,GAEA,MAAMC,EAAaN,EAAKO,YACxB,GAAIF,GACF,GAAIH,EAAMI,EAAa1D,EACrB,OAAO,OAEJ,GAAIuD,EAAMG,EAAazD,EAC5B,OAAO,EAIT,IAAK,IAAIkC,EAAI,EAAGA,EAAIuB,EAAYvB,IAAK,CACnC,MACMyB,EAAaH,EAAaF,EAAMA,EAAMpB,EAG5C,IAAK,CAACiB,EAAM,MAAMmB,SAAS9B,EAJRgB,EAAaH,EAAMnB,EAAImB,GAIGM,IAC3C,OAAO,CAEX,CAEA,OAAO,CACT,EAgGEY,mBAvDyB,SAA4B5D,GACrD,IAAK4B,EAAS5B,GACZ,OAGF,MAAMwC,EAAOZ,EAAS5B,GACtB,MAAO,CACL0C,IAAKF,EAAKE,IACVC,IAAKH,EAAKG,IACVE,WAAYL,EAAKK,WAErB,EA6CEgB,WA3CiB,SAAoBC,EAAaC,GAClD,GAAwC,OAApClC,EAAMiC,GAAaC,GACrB,MAAM,IAAIC,MAAM,kDAGlB,MAAMhE,EAAW6B,EAAMiC,GAAaC,GAAad,WAC3C,KAAET,EAAI,IAAEE,EAAG,IAAEC,EAAG,WAAEE,GAAejB,EAAS5B,GAC1C8C,EAAaN,EAAKO,YAExB,IAAK,IAAIxB,EAAI,EAAGA,EAAIuB,EAAYvB,IAAK,CACnC,MACMyB,EAAaH,EAAaF,EAAMA,EAAMpB,EAE5CM,EAHmBgB,EAAaH,EAAMnB,EAAImB,GAGxBM,GAAc,IAClC,QAEOpB,EAAS5B,EAClB,EA2BEiE,eAzBqB,WACrBpC,EAAQ,IAAIC,MAAM1C,GACf2C,KAAK,MACLC,KAAI,IAAM,IAAIF,MAAMzC,GAAgB0C,KAAK,QAC5CH,EAAW,CAAC,CACd,EAsBF,CD3IoBsC,GAcZzB,EAAU,SAAiBC,EAAKC,GACpC,OAAOhB,EAAUc,QAAQC,EAAKC,EAChC,EAmDA,MAAO,CACLT,YALkB,WAClB,OAAOP,EAAUO,aACnB,EAIEiC,QAnEc,WACd,OAAOzC,CACT,EAkEEuB,QA5Dc,WACd,OAAO1D,CACT,EA2DE6E,QAjEc,SAAiBC,GAC/B3C,EAAO2C,CACT,EAgEE5B,UACAG,QAvDc,SAAiBJ,EAAME,EAAKC,GAAyB,IAApBE,EAAUyB,UAAAvE,OAAA,QAAAwE,IAAAD,UAAA,IAAAA,UAAA,GACzD3C,EAAUiB,QAAQJ,EAAME,EAAKC,EAAKE,EACpC,EAsDEK,aArDmB,WACnB,OAAOvB,EAAUuB,cACnB,EAoDEC,YAlDkB,SAAqBT,EAAKC,GAC5C,OAAOhB,EAAUwB,YAAYT,EAAKC,EACpC,EAiDES,cA/CoB,SAAuBV,EAAKC,GAChDhB,EAAUyB,cAAcV,EAAKC,EAC/B,EA8CEW,YA5CkB,WAClB,OAAO3B,EAAU2B,aACnB,EA2CEI,iBAzCuB,SACvBlB,EACAE,EACAC,EACAE,GAEA,OAAOlB,EAAU+B,iBAAiBlB,EAAME,EAAKC,EAAKE,EACpD,EAmCE2B,YAjCkB,SAAqB9B,EAAKC,GAC5C,MAAMH,EAAOC,EAAQC,EAAKC,GAC1B,OAAgB,OAATH,EAAgB,GAAKA,EAAKS,SACnC,EA+BEgB,eA7BqB,WACrBtC,EAAUsC,gBACZ,EA4BEL,mBA1ByB,SAA4B5D,GACrD,OAAO2B,EAAUiC,mBAAmB5D,EACtC,EAyBE6D,WAvBiB,SAAoBnB,EAAKC,GAC1ChB,EAAUkC,WAAWnB,EAAKC,EAC5B,EAuBF,CE1FO,MAAM8B,EAAWjF,OAAOC,OAAO,CACpC,QAAW,EACX,WAAc,EACd,UAAa,EACb,UAAa,EACb,cAAe,IAGV,SAASiF,EAAW1E,GACzB,MAAMD,EAAS0E,EAASzE,GACxB,IAAKD,EACH,MAAM,IAAIiE,MAAM,qBAGlB,IAAIW,EAAO,EAEX,MAQMlB,EAAS,WACb,OAAOkB,IAAS5E,CAClB,EAQA,MAAO,CAAEgD,UAlBS,WAChB,OAAOhD,CACT,EAgBoB0D,SAAQJ,IANhB,WACLI,MACHkB,GAAQ,EAEZ,EAEiC1B,QAdjB,WACd,OAAOjD,CACT,EAaF,CChCA,MAAM4E,EAAgBC,SAASC,cAAc,mBACvCC,EAAeF,SAASC,cAAc,0BACtCE,EAAeH,SAASC,cAAc,uBACtCG,EAAeJ,SAASC,cAAc,uBACtCI,EAAUL,SAASC,cAAc,qBACjCK,EAAgBN,SAASC,cAAc,IAAIpE,EAAcC,SACzDyE,EAAgBP,SAASC,cAAc,8BACvCO,EAAmBR,SAASC,cAAc,aAC1CQ,EAAiBT,SAASC,cAAc,WAExCS,EAAe,SAAsBC,EAAMC,GAC/C,MAAMC,EAASb,SAASc,cAAc,UAKtC,OAJAD,EAAO5F,KAAO,SACd4F,EAAOE,YAAcJ,EACrBE,EAAOG,UAAUC,IAAI,MAAOL,GAErBC,CACT,EAEMK,EAAkB,SAAyBC,GAC/C,IAAK,IAAItD,EAAM,EAAGA,EAAMtD,EAAasD,IACnC,IAAK,IAAIC,EAAM,EAAGA,EAAMtD,EAAgBsD,IACtCqD,EAAStD,EAAKC,EAGpB,EAWAkC,SAASoB,iBAAiB,cAAcC,SAASC,IAC/CJ,GAAgB,CAACrD,EAAKC,KACpB,MAAMyD,EAXa,SAA+B1D,EAAKC,GACzD,MAAM0D,EAAOxB,SAASc,cAAc,OAKpC,OAJAU,EAAKC,QAAQ5D,IAAMA,EACnB2D,EAAKC,QAAQ3D,IAAMA,EACnB0D,EAAKR,UAAUC,IAAI,aACnBO,EAAKE,MAAMC,SAAW,GAAG9D,EAAM,OAAOC,EAAM,sBACrC0D,CACT,CAIqBI,CAAe/D,EAAKC,GACrCwD,EAAKO,YAAYN,EAAS,GAC1B,IAGJ,MAAMO,EAAW,SAAyBC,GACxC,OAAOA,EAAY5B,EAAeC,CACpC,EAEM4B,EAAoB,SAA2BD,EAAWE,GAC9D,MAAMjF,EAAQ8E,EAASC,GAEvBb,GAAgB,CAACrD,EAAKC,KACpB,MAAMoE,EAAOlF,EAAMiD,cAAc,cAAcpC,iBAAmBC,OAE9DmE,EAAOrE,QAAQC,EAAKC,KAASmE,EAAOrE,QAAQC,EAAKC,GAAKc,UACxDsD,EAAKlB,UAAUC,IAAI,YACrB,GAEJ,EAgDMkB,EAAmB,SAA0BC,GACjDpC,SAASC,cAAc,WAAWc,YAAcqB,CAClD,EAeMC,EAAqB,WACzBhC,EAAQiC,mBAAgB7C,UAC1B,EAEM8C,EAAc,SAClBC,EACA3E,EACAC,EACAE,EACA9C,GAEAsH,EAAYd,MAAMe,aAAe,GAAG5E,EAAM,IAC1C2E,EAAYd,MAAMgB,gBAAkB,GAAG5E,EAAM,IAEzCE,GACFwE,EAAYxB,UAAUC,IAAI,YAC1BuB,EAAYd,MAAMiB,WAAa,QAAQzH,IACvCsH,EAAYd,MAAMkB,cAAgB,WAElCJ,EAAYxB,UAAU6B,OAAO,YAC7BL,EAAYd,MAAMiB,WAAa,SAC/BH,EAAYd,MAAMkB,cAAgB,QAAQ1H,IAE9C,EAeM4H,EAAmB,SAA0B3H,GACjD,OAAO6E,SAASC,cAAc,0BAA0B9E,MAC1D,EAEM0E,EAAa,SAA6B5E,EAAMC,GACpD,MAAM6H,EAAgB/C,SAASc,cAAc,OAC7CiC,EAActB,QAAQxG,KAAO,GAAGA,IAChC8H,EAAc/B,UAAUC,IAAI,kBAE5B,IAAK,IAAIvE,EAAI,EAAGA,EAAIxB,EAAQwB,IAC1BqG,EAAclB,YAAY7B,SAASc,cAAc,SAvBzB,SAC1B0B,EACAxE,EACA9C,GAEA,MAAM8H,EAAYR,EAAYS,WAAU,GACxCD,EAAUhC,UAAUC,IAAI,cAExBsB,EAAYS,EAAW,EAAG,GAiBS,EAjBM9H,GAEzCqF,EAAcsB,YAAYmB,EAC5B,CAcEE,CAAoBH,EAAe,EAAO7H,GAE1C6H,EAAcI,WAAY,EAC1BJ,EAAc/B,UAAUC,IAAI,iBAC5BX,EAAcuB,YAAYkB,EAC5B,EAgGMK,EAAqB,WACzB,OAAOpD,SAASC,cAAc,qBAChC,EAkCMoD,EAAuB,SAA8BxG,GACzDsF,EAAiB,GAAGtF,WACtB,EA+DMyG,EAAwB,WA5D5BpD,EAAarD,KAAK0G,MAAQ,GAC1B/C,EAAiBgD,SAAU,EAC3BhD,EAAiBiD,UAAW,EAC5BhD,EAAegD,UAAW,EAtH1BzD,SAASoB,iBAAiB,mBAAmBC,SAASqC,IACpDA,EAAIb,QAAQ,GAiLhB,EAEMc,EAAqB,WACzBL,IAEA,IAAK,MAAMtI,KAAYL,OAAO2C,OAAOnC,GACnC0E,EAAW7E,EAASC,KAAMD,EAASE,OAEvC,EAYM0I,EAAuB,SAC3BC,EACAC,GAEA3B,EAAiB,IApSO,WACxB,MAAM4B,EAAe,CAAC5D,EAAcC,GAEpCc,GAAgB,CAACrD,EAAKC,KACpBiG,EAAa1C,SAASrE,IACPA,EAAMiD,cACjB,cAAcpC,iBAAmBC,OAE9BkD,UAAY,WAAW,GAC5B,GAEN,CA0REgD,GACAV,IAvGyB,SACzBO,EACAC,GAEA9D,SAASC,cAAc,qBAAqBe,UAAUC,IAAI,UAC1DjB,SAASC,cAAc,yBAAyBc,YAAc8C,EAC9D7D,SAASC,cAAc,yBAAyBc,YAAc+C,CAChE,CAiGEG,CAAmBJ,EAAaC,EAClC,EAoDMI,EAAW,SAAkBC,GACjCnE,SAASoE,gBAAgBxD,UAAYuD,CACvC,EAqHaE,EA1PY,SAA0BxI,GACjDmE,SAASC,cAAc,IAAIpE,KAAiBmF,UAAU6B,OAAO,WAC7D7C,SAASC,cAAc,IAAIpE,cAA0BkF,YAAc,EACrE,EAuPasD,EAjPgB,SAA8BxI,GACzD,MACuE,KAArEmE,SAASC,cAAc,IAAIpE,cAA0BkF,WAEzD,EA6OasD,EAQXH,EARWG,EA3SkB,WAC7B,MAAMrB,EAAYI,IAClB,OAAOJ,EAAYA,EAAUvB,QAAQxG,KAAO,IAC9C,EAwSaoJ,EAWXvB,EAXWuB,EAtSmB,WAC9BrE,SAASC,cAAc,qBAAqBe,UAAU6B,OAAO,SAC/D,EAoSawB,EA7YK,SAChBxG,EACAC,EACAE,EACA/C,EACAC,GAEA,MAAMoJ,EAAe,6BAA6BrJ,MAC5CuH,EAAcxC,SAASC,cAAcqE,GAGtC/D,EAAcN,cAAcqE,IAC/B/D,EAAcsB,YAAYW,GAG5BD,EAAYC,EAAa3E,EAAKC,EAAKE,EAAY9C,GAC/CqH,EAAYO,EAAiB7H,GAAO,EAAG,EAAG+C,EAAY9C,EACxD,EA4XamJ,EAjNU,SAAwBtC,EAAWwC,GACxDpC,EAAiB,GAAGoC,EAAcjF,mBAClC+C,EAAmB3B,EAAa,aAAc,eAE9CsB,EAAkBD,EAAWwC,EAC/B,EChXA,IAAIC,EAASC,EACTC,GAAmB,EACnBC,GAAgB,EAEpB,MAAMC,EAAY,SAAmB7C,GACnC,OAAOA,EAAYyC,EAAUC,CAC/B,EAYMI,EAAa,SAAoBC,EAAgBjH,EAAKC,GAC1D,MAAMiH,EAAkBH,EAAUD,GAClCG,EAAevG,cAAcV,EAAKC,GAElC,MAAMkH,EAAeF,EAAexG,YAAYT,EAAKC,GAGrD,GD+DoB,SACpBD,EACAC,EACAmH,EACAN,IAEsBA,EAAgBvE,EAAeD,GAC1BF,cACzB,cAAcpC,iBAAmBC,OAE9BkD,UAAUC,IAAIgE,IAAaxJ,EAAaG,IAAM,WAAa,YAClE,CC5EEyI,CAAmBxG,EAAKC,EAAKkH,EAAcL,GAGzCK,IAAiBvJ,EAAaG,KAC9BkJ,EAAelH,QAAQC,EAAKC,GAAKc,SACjC,CACA,MAAMjB,EAAOmH,EAAelH,QAAQC,EAAKC,GACnCoH,EAAeJ,EAAe/F,mBAAmBpB,EAAKS,YDqCvC,SACvB2D,EACAlE,EACAC,EACAE,EACAC,GAEA,MAAMjB,EAAQ8E,EAASC,GAEvB,IAAK,IAAIrF,EAAI,EAAGA,EAAIuB,EAAYvB,IAAK,CACnC,MAAMyI,EAAanH,EAAaH,EAAMnB,EAAImB,EACpCM,EAAaH,EAAaF,EAAMA,EAAMpB,EAEtCwF,EAAOlF,EAAMiD,cACjB,cAAckF,iBAA0BhH,OAE1C+D,EAAKlB,UAAUC,IAAI,UACnBiB,EAAKlB,UAAU6B,OAAO,WACxB,CACF,CCtDIwB,EACGM,EACDO,EAAarH,IACbqH,EAAapH,IACboH,EAAalH,WACbL,EAAKO,YAET,CAEI4G,EAAerG,gBACjB4F,EAAoBM,EAAeI,GACnCL,GAAmB,GAGrBC,GAAiBA,CACnB,EAEMS,EAAoB,SAA2BnD,EAAQtE,GAC3D,IAAIE,EAAM5B,EAAa,IACnB6B,EAAM7B,EAAa,IACnB+B,EAAiC,IAApB/B,EAAa,GAE9B,MAAQgG,EAAOpD,iBAAiBlB,EAAME,EAAKC,EAAKE,IAC9CH,EAAM5B,EAAa,IACnB6B,EAAM7B,EAAa,IACnB+B,EAAiC,IAApB/B,EAAa,GAG5BgG,EAAOlE,QAAQJ,EAAME,EAAKC,EAAKE,GAC/BqG,EAAexG,EAAKC,EAAKE,EAAYL,EAAKS,UAAWT,EAAKO,YAC5D,EAEMmH,EAAkBpD,IACtB,IAAK,MAAMjH,KAAYL,OAAO2C,OAAOnC,GACnCiK,EAAkBnD,EAAQpC,EAAW7E,EAASC,MAChD,EAYIqK,EAAuB,SAA8BC,GACzD,MAAMC,EAAoBD,EAAME,cAAczE,UAAU0E,SAAS,YAC3D7H,EAAM0H,EAAMI,OAAOlE,QAAQ5D,IAC3BC,EAAMyH,EAAMI,OAAOlE,QAAQ3D,IAE3B8H,EAAoBnB,EAAQrG,YAAc1D,EAAWK,SAC3D,GACGyK,GAAqBI,GACtBJ,IAAsBb,IACrBD,EAED,OAEF,MAAMI,EAAiBF,EAAUY,GAEjC,GAAIV,EAAexG,YAAYT,EAAKC,KAASrC,EAAaC,UAI1DmJ,EAAWC,EAAgBjH,EAAKC,GAG3B4G,GAIL,GAAIkB,EAAmB,CACrB,MAAOC,EAAaC,GAAerB,EAAQsB,kBACzCvB,EAAQnG,gBAEVwG,EAAWL,EAASqB,EAAaC,GAEjC,MAAME,EAAexB,EAAQ5G,QAAQiI,EAAaC,GAClDrB,EAAQwB,iBACNJ,EACAC,EACAE,GAAgBA,EAAapH,SAC7B4F,EAAQnG,eAEZ,KAAO,CACL,MAAM0G,EAAkBH,GAAWD,GDgTrC5C,GC9SK4C,ED+SLuB,EC9SInB,ED+SJoB,EC9SIrB,EAAexF,UDgTnBU,SAASC,cAAc,UAAUwD,UAAW,EAC5CzD,SAASC,cAAc,YAAYwD,UAAW,EAC9CJ,EAAqB8C,GAtXC,SAAyBpE,EAAWE,GAC1D,MAAMjF,EAAQ8E,EAASC,GAEvBb,GAAgB,CAACrD,EAAKC,KACpB,MAAMoE,EAAOlF,EAAMiD,cAAc,cAAcpC,iBAAmBC,OAE9DmE,EAAOrE,QAAQC,EAAKC,IACtBoE,EAAKlB,UAAU6B,OAAO,YACxB,GAEJ,CA6WEuD,CAAgBrE,EAAWmE,GCjTzBxB,GAAmB,CACrB,CDwSsB,IACtB3C,EACAmE,EACAC,CC1SF,EAEME,GAAwB,WAC5B,MAAMpE,EAAS2C,EAAUD,GACzB1C,EAAO7C,iBACPiG,EAAepD,GAEXoC,EAA0BxI,EAAcC,QAC1CuI,EAAsBxI,EAAcC,MAExC,EAEMwK,GAAmB,WDqPvB3C,IACA5D,EAAcwG,YCpPd/B,EAAU5H,EAAa,SAAUlC,EAAWG,OAC5C4J,OAAU/E,EACViF,GAAgB,CAClB,EAEM6B,GAAmB,SAA0BjB,GACjD,MAAMxC,EAAgBwC,EAAMI,QACtB,QAAEc,EAAO,QAAEC,GD4cZ,SAAsB/I,GAC3B,MAAMK,EAAaL,EAAKqD,UAAU0E,SAAS,YAGrCiB,EAAe3I,EAAa,EAAqC,EAAjC4I,OAAOjJ,EAAKkJ,mBAC5CC,EAAgB9I,EAAkD,EAAjC4I,OAAOjJ,EAAKkJ,mBAAhB,EAEnC,MAAO,CACLJ,QAASG,OAAOjJ,EAAKoJ,aAAeJ,EACpCD,QAASE,OAAOjJ,EAAKqJ,cAAgBF,EAEzC,CCvd+BG,CAAalE,GACpCC,EAAYqB,EAAsBtB,EAActB,QAAQxG,MAE9DsK,EAAM2B,aAAaC,QAAQ,aAAcpE,EAActB,QAAQxG,MAC/DsK,EAAM2B,aAAaE,aAAapE,EAAWyD,EAASC,GACpDnB,EAAM2B,aAAaG,WAAa,OAOhCC,YAAW,MDwRe,SAC1BvE,EACAC,IAlPgC,SAChCR,GAEA,MAAM+E,EAAS/E,EAAYS,WAAU,GACrCsE,EAAOC,GAAK,mBACZD,EAAOpE,WAAY,EACnBoE,EAAOvG,UAAU6B,OAAO,iBAExBtC,EAAcsB,YAAY0F,EAC5B,CA2OEE,CAA0B1E,GAC1BC,EAAUhC,UAAUC,IAAI,SAC1B,CC7RIoD,CAAyBtB,EAAeC,EAAU,GACjD,EACL,EAEM0E,GAAiB,WD4RrB1H,SAASC,cAAc,qBAAqB4C,SAC5CO,IAAqBpC,UAAU6B,OAAO,SC3RxC,EAEM8E,GAAuB,SAA8BpC,GACxClB,MAKjBkB,EAAMqC,iBACNrC,EAAM2B,aAAaG,WAAa,OAClC,EAEMQ,GAAqB,WACRxD,KAKjBA,GACF,EAEMyD,GAA0B,SAAiCvC,GAC/D,MAAMpK,EAAWkJ,IACjB,IAAKlJ,EACH,OAGFoK,EAAMqC,iBACNrC,EAAM2B,aAAaG,WAAa,OAEhC,MAAMpF,EAAS2C,EAAUD,GACnBoD,EAASnB,OAAOrB,EAAMI,OAAOlE,QAAQ5D,KACrCmK,EAASpB,OAAOrB,EAAMI,OAAOlE,QAAQ3D,KACrCoH,EAAejD,EAAOlD,mBAAmB5D,GAC/C,IAAIwC,EAAMK,EAELkH,GAIHvH,EAAOsE,EAAOrE,QAAQsH,EAAarH,IAAKqH,EAAapH,KACrDE,EAAakH,EAAalH,aAJ1BL,EAAOkC,EAAW1E,GAClB6C,GAAa,ID2Be,SAC9BH,EACAC,EACAmK,EACA/M,EACA8C,GAEA,MAAMuJ,EAASvH,SAASC,cAAc,qBACtCsH,EAAOvG,UAAUC,IAAI,UAErB,MAAMiH,EAAgBC,OAAOC,iBAAiBb,GACxCc,EAAkBzB,OAAOsB,EAAczF,cACvC6F,EAAkB1B,OAAOsB,EAAcxF,iBAKvC6F,EAAS1K,GAHCG,EAAa9C,EAAS,GAGP,EACzBsN,EAAS1K,GAHEE,EAAsB,EAAT9C,GAGC,GAvCF,SAC7BqM,EACAvJ,EACAuK,EACAC,EACAtN,GAEA,MAAMuN,EAAYzK,EAAauK,EAASC,EAClCE,EAAW1K,EAAazD,EAAc,EAAIC,EAAiB,EAG3DmO,EACJF,EAAYC,EAAWxN,GAAUuN,EAAYC,GAAYxN,EAErD0N,EAAc,GACpB,IAAK,IAAIlM,EAAI,EAAGA,EAAIiM,EAAcjM,IAChCkM,EAAYlL,KAAKsC,SAASc,cAAc,QAE1CyG,EAAOjF,mBAAmBsG,EAC5B,CAsBEC,CAAuBtB,EAAQvJ,EAAYuK,EAAQC,EAAQtN,GAEvD2C,IAAQwK,EAAkB,IAC5Bd,EAAO7F,MAAMoH,QAAU,GAAGjL,EAAM,OAAO1B,KAAK4M,IAAIR,EAAQhO,EAAc,MAGpEuD,IAAQwK,EAAkB,IAC5Bf,EAAO7F,MAAMsH,WAAa,GAAGlL,EAAM,OAAO3B,KAAK4M,IAAIP,EAAQhO,EAAiB,MAGzEyN,EAGHV,EAAOvG,UAAU6B,OAAO,WAFxB0E,EAAOvG,UAAUC,IAAI,UAIzB,CCvDEoD,CACE0D,EACAC,EAJc/F,EAAOpD,iBAAiBlB,EAAMoK,EAAQC,EAAQhK,GAM5DL,EAAKO,YACLF,EAEJ,EAEMiL,GAAmB,WAClB5E,KAILA,GACF,EAEM6E,GAAmB,SAA0B3D,GACjD,MAAMpK,EAAWoK,EAAM2B,aAAaiC,QAAQ,cAC5C,IAAK1O,EAAWqE,SAAS3D,GACvB,OAGFoK,EAAMqC,iBAEN,MAAM3F,EAAS2C,EAAUD,GACnBO,EAAejD,EAAOlD,mBAAmB5D,GACzC4M,EAASnB,OAAOrB,EAAMI,OAAOlE,QAAQ5D,KACrCmK,EAASpB,OAAOrB,EAAMI,OAAOlE,QAAQ3D,KAC3C,IAAIH,EAAMK,EAGLkH,GAIHvH,EAAOsE,EAAOrE,QAAQsH,EAAarH,IAAKqH,EAAapH,KACrDE,EAAakH,EAAalH,aAJ1BL,EAAOkC,EAAW1E,GAClB6C,GAAa,GAMXiE,EAAOpD,iBAAiBlB,EAAMoK,EAAQC,EAAQhK,KAC5CkH,GACFjD,EAAOjD,WAAWkG,EAAarH,IAAKqH,EAAapH,KAEnDmE,EAAOlE,QAAQJ,EAAMoK,EAAQC,EAAQhK,GACrCqG,EACE0D,EACAC,EACAhK,EACAL,EAAKS,UACLT,EAAKO,aAI2B,IAAhC+D,EAAO5E,cAAcnC,QACrBmJ,EAA0BxI,EAAcC,QAExCuI,EAAsBxI,EAAcC,OAG1C,EAEMsN,GAAmB,SAA0B7D,GACjD,MAAMpK,EAAWoK,EAAM2B,aAAaiC,QAAQ,cAC5C,IAAK1O,EAAWqE,SAAS3D,GACvB,OAGFoK,EAAMqC,iBAEN,MAAM3F,EAAS2C,EAAUD,GACnBO,EAAejD,EAAOlD,mBAAmB5D,GAG/C,GAAI+J,EAAc,CAChB,MAAMvH,EAAOkC,EAAW1E,GACxB8G,EAAOjD,WAAWkG,EAAarH,IAAKqH,EAAapH,KDNlC,SAAmC7C,EAAMC,GAC1D,MAAMoJ,EAAe,6BAA6BrJ,MAC5CuH,EAAcxC,SAASC,cAAcqE,GAGtChE,EAAcL,cAAcqE,IAC/BhE,EAAcuB,YAAYW,GAG5BA,EAAYxB,UAAU6B,OAAO,YAC7BL,EAAYd,MAAMC,SAAW,GAC7BY,EAAYa,IAAsB,EAAG,GAAG,EAAOlI,EACjD,CCLImJ,CAAgB1G,EAAKS,UAAWT,EAAKO,YACvC,CACF,EAEMmL,GAAoB,SAA2B9D,GACnD,MAAMpK,EAAWoK,EAAMI,OAAOlE,QAAQxG,KAChCgH,EAAS2C,EAAUD,IACnB,IAAE9G,EAAG,IAAEC,EAAG,WAAEE,GAAeiE,EAAOlD,mBAAmB5D,GACrDwC,EAAOsE,EAAOrE,QAAQC,EAAKC,GAE7BmE,EAAOpD,iBAAiBlB,EAAME,EAAKC,GAAME,KAC3CiE,EAAOjD,WAAWnB,EAAKC,GACvBmE,EAAOlE,QAAQJ,EAAME,EAAKC,GAAME,GAChCqG,EAAexG,EAAKC,GAAME,EAAYL,EAAKS,UAAWT,EAAKO,aAE/D,EAEMoL,GAAgB,SAAuB/D,GAC3C,MAAM,KAAE1I,EAAI,SAAE0M,GDkDP,CACL1M,KAAMqD,EAAarD,KAAK0G,MACxBgG,SAAUrJ,EAAaqJ,SAAShG,OCnD5BtB,EAAS2C,EAAUD,GD6BJ,IAAwB6E,EATtCtJ,EAAarD,KAAK4M,SAASC,OAAyC,KAAhCxJ,EAAaqJ,SAAShG,OClBP,IAAhCtB,EAAO5E,cAAcnC,QAC7C+G,EAAO1C,QAAQ1C,GAEE,aAAb0M,GACF7E,GAAmB,EACnBD,EJtOC,WACL,MAAMxC,EAASrF,EAAa,WAAYlC,EAAWK,UACnD,IAAI4O,EAAmB,GAEvB,MAAMC,EAAiB,SAAwB/L,EAAKC,GAClD,OAAOD,GAAO,GAAKA,EAAMtD,GAAeuD,GAAO,GAAKA,EAAMtD,CAC5D,EA4FA,MAAO,IAAKyH,EAAQ8D,kBAnEM,SAA2B3I,GACnD,MAAMyM,EAxBmB,SAA4BzM,GACrD,KAAOuM,EAAiBzO,OAAS,GAAG,CAClC,MAAO2C,EAAKC,GAAO6L,EAAiBG,MACpC,GAAI1M,EAAUS,GAAKC,KAASrC,EAAaC,QACvC,MAAO,CAACmC,EAAKC,EAEjB,CAEA,OAAO,IACT,CAe0BiM,CAAmB3M,GAE3C,OAAIyM,GAfgB,SAAuBzM,GAC3C,IAAIS,EAAM5B,EAAa,IACnB6B,EAAM7B,EAAa,IAEvB,KAAOmB,EAAUS,GAAKC,KAASrC,EAAaC,SAC1CmC,EAAM5B,EAAa,IACnB6B,EAAM7B,EAAa,IAGrB,MAAO,CAAC4B,EAAKC,EACf,CASSkM,CAAc5M,EACvB,EA2DuC6I,iBAjBd,SACvBpI,EACAC,EACAmM,EACA7M,GAEA,GAAI6M,EACFN,EAAmB,QACd,GAAIvM,EAAUS,GAAKC,KAASrC,EAAaG,IAAK,CACnD,MAAMsO,EAjDwB,SAChCrM,EACAC,EACAV,GAEA,MAAM+M,EAAa7N,EAAa,CAC9B,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,EAAE,EAAG,GACL,CAAC,GAAI,KAGD8N,EAAyB,GAE/B,IAAK,MAAOC,EAAMC,KAASH,EAAY,CACrC,MAAMpC,EAASlK,EAAMwM,EACfrC,EAASlK,EAAMwM,EAErB,GACEV,EAAe7B,EAAQC,IACvB5K,EAAU2K,GAAQC,KAAYvM,EAAaC,QAC3C,CACA,MAAM6O,EAAc1M,EAAMwM,EACpBG,EAAc1M,EAAMwM,EAKxBV,EAAeW,EAAaC,IAC5BpN,EAAUmN,GAAaC,KAAiB/O,EAAaG,IAErDwO,EAAuB1M,KAAK,CAACqK,EAAQC,IAErCoC,EAAuBK,QAAQ,CAAC1C,EAAQC,GAE5C,CACF,CACA,OAAOoC,CACT,CAWkBM,CAA0B7M,EAAKC,EAAKV,GAClDuM,EAAiBjM,QAAQwM,EAC3B,MAEEP,EAAmBrN,EAAaqN,EAEpC,EAGF,CImIgBgB,GACVtF,EAAeZ,GDuFM,SACzBD,EACAX,EACAC,GAEAF,EAAqBC,EAAaC,GAClC9B,GAAkB,EAAMwC,GACxBnC,EAAmB3B,EAAa,UAAW,WAC7C,CC9FM2D,CAAwBG,EAASA,EAAQlF,UAAWmF,EAAQnF,aAE5DqF,GAAiBA,EAGZF,ED2Fc,SAA0BZ,EAAaC,GAC9DF,EAAqBC,EAAaC,GAElC,MAAM8G,EAAalK,EAAa,UAAW,WAC3CkK,EAAWnH,UAAW,EACtBpB,EAAmB3B,EAAa,QAAS,SAAUkK,GACnDvH,EAAqBQ,EACvB,CC7FQQ,CAAsBG,EAAQlF,UAAWmF,EAAQnF,YAJjDmF,EAAU7H,EAAa,SAAUlC,EAAWG,ODkElD8I,IAxEAlD,EAAe+C,SAAU,EACzBhD,EAAiBiD,UAAW,EAC5BhD,EAAegD,UAAW,ECMpB8B,EAAMqC,qBDYiC4B,ECNS,IAAhCvH,EAAO5E,cAAcnC,ODOvCgF,EAAarD,KAAK4M,SAASoB,eAC7B3K,EAAarD,KAAKmE,UAAUC,IAAI,WAChCjB,SAASC,cAAc,kBAAkBc,YACvC,kCAGgC,KAAhCb,EAAaqJ,SAAShG,QACxBvD,SAASC,cAAc,qBAAqBc,YAC1C,kCAGAyI,IACFlJ,EAAcU,UAAUC,IAAI,WAC5BjB,SAASC,cAAc,4BAA4Bc,YACjD,0CCpBFwE,EAAMqC,iBAEV,EAEMkD,GAAmB,WACnBzG,EAA0BxI,EAAcE,OAC1CsI,EAAsBxI,EAAcE,KAExC,EAEMgP,GAAuB,WACvB1G,EAA0BxI,EAAcG,WAC1CqI,EAAsBxI,EAAcG,SAExC,EAEMgP,GAAe,WACnB,MAAM/I,EAAS2C,EAAUD,IDoFA,SAA4BA,EAAe1C,GACpEjC,SAASC,cAAc,UAAUwD,UAAW,EAC5CzD,SAASC,cAAc,YAAYwD,UAAW,EAC9CtB,EAAiB,eAAeF,EAAO3C,0BACvC0C,EAAkB2C,EAAe1C,EACnC,ECxFEoC,CAAwBM,EAAe1C,GACvCyC,GAAmB,CACrB,EAEMuG,GAAkB,WACtB,MAAMC,ED4GClL,SAASC,cAAc,cAAcuD,QC5GA,OAAS,QACrDa,EAAc6G,GACdC,aAAaC,QAAQ,QAASF,EAChC,EAEMG,GAAe,WD2GnBtL,EAAcuL,OCzGhB,EAEMC,GAAiB,WACrB,MAAMhC,EAAW3E,GAAWD,GAC5BN,GAAqBM,EAAe4E,GACpC7E,GAAmB,CACrB,GAEY,WD0LU,IAA8B8G,EArFGC,ICnGjC,CAClBlN,cAAe+G,EACfoG,OAAQrC,IDkGV,CAAClJ,EAAcC,GAAciB,SAASvE,IACpCA,EAAU6O,iBAAiB,SAAUpG,IAC/BA,EAAMI,OAAO3E,UAAU0E,SAAS,cAClC+F,EAASlN,cAAcgH,EACzB,GACA,IAGJhF,EAAcoL,iBAAiB,SAAUpG,IACnCA,EAAMI,OAAO3E,UAAU0E,SAAS,mBAClC+F,EAASC,OAAOnG,EAClB,IAIgB,SAAoCkG,GACtDpL,EAAQsL,iBAAiB,SAAUpG,IAE/BA,EAAMI,OAAO3E,UAAU0E,SAAS,eAChCH,EAAMI,OAAO3E,UAAU0E,SAAS,cAEhC+F,EAASG,QACArG,EAAMI,OAAO3E,UAAU0E,SAAS,SACzC+F,EAASI,QACAtG,EAAMI,OAAO3E,UAAU0E,SAAS,YACzC+F,EAASK,SACX,GAEJ,CC1HEzH,CAAiB,CACfuH,MAAOtF,GACPuF,MAAOb,GACPc,QAASP,KDyHW,SAAiCE,GAEvDnL,EAAcqL,iBAAiB,WAAYF,EAAS9D,sBAGpDpH,EAAcoL,iBAAiB,YAAaF,EAASxC,kBACrD1I,EAAcoL,iBAAiB,YAAapG,IACtCA,EAAMI,OAAO3E,UAAU0E,SAAS,aAClC+F,EAAS5D,qBACAtC,EAAMI,OAAO3E,UAAU0E,SAAS,cACzC+F,EAAS3D,wBAAwBvC,EACnC,IAIFxF,EAAc4L,iBAAiB,aAAcpG,IAEhB,QAAzBA,EAAMI,OAAOoG,SACbxG,EAAMI,OAAO3E,UAAU0E,SAAS,mBAEhC+F,EAASjF,iBAAiBjB,EAC5B,IAEFxF,EAAc4L,iBAAiB,WAAYpG,IAEd,QAAzBA,EAAMI,OAAOoG,SACbxG,EAAMI,OAAO3E,UAAU0E,SAAS,mBAEhC+F,EAAS/D,gBACX,IAEF3H,EAAc4L,iBAAiB,QAASpG,IAClCA,EAAMI,OAAO3E,UAAU0E,SAAS,aAClC+F,EAASvC,iBAAiB3D,GACjBA,EAAMI,OAAO6B,KAAO,GAAG3L,EAAcC,SAC9C2P,EAASrC,iBAAiB7D,EAC5B,GAEJ,CC3JElB,CAAqB,CACnBmC,oBACAkB,kBACAG,sBACAC,2BACAoB,oBACAE,oBACAH,oBACAtB,0BDqJqB,SAAiC8D,GACxD1L,EAAc4L,iBAAiB,UAAWpG,IACxCkG,EAASO,OAAOzG,EAAM,IAGxBxF,EAAc4L,iBAAiB,SAAUpG,IACnCA,EAAMI,OAAO3E,UAAU0E,SAAS,aAClC+F,EAASQ,YACA1G,EAAMI,OAAO3E,UAAU0E,SAAS,UACzC+F,EAASH,OACX,GAEJ,CC7JEjH,CAAsB,CACpB4H,UAAW5F,GACX2F,OAAQ1C,GACRgC,MAAOD,KD4JyCG,ECxJ/BV,GDyJnB9K,SACGC,cAAc,IAAIpE,EAAcE,QAChC4P,iBAAiB,QAASH,GAGL,SAAkCA,GAC1DxL,SACGC,cAAc,IAAIpE,EAAcG,YAChC2P,iBAAiB,SAAUH,EAChC,CCjKEnH,CAAuB0G,IDmKE,SAA4BS,GACrDxL,SAASC,cAAc,cAAc0L,iBAAiB,SAAUH,EAClE,CClKEnH,CAAwB4G,IAExB,MAAM9G,EAAQgH,aAAae,QAAQ,SAC9B/H,EAEgB,SAAVA,ID6CXnE,SAASC,cAAc,cAAcuD,SAAU,EAC/CU,EAAS,SC/CPiH,aAAaC,QAAQ,QAAS,QAIlC,CCnaAe,E","sources":["webpack://battleship/./src/js/constants.js","webpack://battleship/./src/js/types.js","webpack://battleship/./src/js/utils/random.js","webpack://battleship/./src/js/model/player.js","webpack://battleship/./src/js/model/gameboard.js","webpack://battleship/./src/js/model/ship.js","webpack://battleship/./src/js/view.js","webpack://battleship/./src/js/controller.js","webpack://battleship/./src/js/index.js"],"sourcesContent":["const NUM_OF_ROWS = 10;\nconst NUM_OF_COLUMNS = 10;\nconst SHIP_TYPES = [\n  'carrier',\n  'battleship',\n  'destroyer',\n  'submarine',\n  'patrol-boat',\n];\n\nexport { NUM_OF_ROWS, NUM_OF_COLUMNS, SHIP_TYPES };\n","export const playerType = Object.freeze({\n  HUMAN: Symbol('human'),\n  COMPUTER: Symbol('computer'),\n});\n\nconst shipInfo = (type, length) => ({ type, length });\n\nexport const shipType = Object.freeze({\n  CARRIER: shipInfo('carrier', 5),\n  BATTLESHIP: shipInfo('battleship', 4),\n  DESTROYER: shipInfo('destroyer', 3),\n  SUBMARINE: shipInfo('submarine', 3),\n  PATROL_BOAT: shipInfo('patrol-boat', 2),\n});\n\nexport const tileInfoType = Object.freeze({\n  UNKNOWN: Symbol('unknown'),\n  MISSED: Symbol('missed'),\n  HIT: Symbol('hit'),\n});\n\nexport const formFieldType = Object.freeze({\n  SHIPS: 'planning-ships',\n  NAME: 'name',\n  OPPONENT: 'opponent',\n});\n","export function getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nexport function shuffleArray(array) {\n  const shuffledArray = array.slice();\n\n  // Fisher-Yates algorithm\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = getRandomInt(i + 1);\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n\n  return shuffledArray;\n}\n","import { NUM_OF_COLUMNS, NUM_OF_ROWS } from '../constants';\nimport { createGameboard } from './gameboard';\nimport { playerType, tileInfoType } from '../types';\nimport { getRandomInt, shuffleArray } from '../utils/random';\n\nexport function createPlayer(name, playerType) {\n  const gameboard = createGameboard();\n\n  const getName = function getName() {\n    return name;\n  };\n\n  const setName = function setName(newName) {\n    name = newName;\n  };\n\n  const getType = function getType() {\n    return playerType;\n  };\n\n  const getShip = function getShip(row, col) {\n    return gameboard.getShip(row, col);\n  };\n\n  const setShip = function setShip(ship, row, col, isVertical = false) {\n    gameboard.setShip(ship, row, col, isVertical);\n  };\n  const getInfoBoard = function getInfoBoard() {\n    return gameboard.getInfoBoard();\n  };\n\n  const getTileInfo = function getTileInfo(row, col) {\n    return gameboard.getTileInfo(row, col);\n  };\n\n  const receiveAttack = function receiveAttack(row, col) {\n    gameboard.receiveAttack(row, col);\n  };\n\n  const isFleetSunk = function isFleetSunk() {\n    return gameboard.isFleetSunk();\n  };\n\n  const isValidPlacement = function isValidPlacement(\n    ship,\n    row,\n    col,\n    isVertical,\n  ) {\n    return gameboard.isValidPlacement(ship, row, col, isVertical);\n  };\n\n  const getShipType = function getShipType(row, col) {\n    const ship = getShip(row, col);\n    return ship === null ? '' : ship.getType();\n  };\n\n  const removeAllShips = function removeAllShips() {\n    gameboard.removeAllShips();\n  };\n\n  const getInitialPosition = function getInitialPosition(shipType) {\n    return gameboard.getInitialPosition(shipType);\n  };\n\n  const removeShip = function removeShip(row, col) {\n    gameboard.removeShip(row, col);\n  };\n\n  const getAllShips = function getAllShips() {\n    return gameboard.getAllShips();\n  };\n\n  return {\n    getAllShips,\n    getName,\n    getType,\n    setName,\n    getShip,\n    setShip,\n    getInfoBoard,\n    getTileInfo,\n    receiveAttack,\n    isFleetSunk,\n    isValidPlacement,\n    getShipType,\n    removeAllShips,\n    getInitialPosition,\n    removeShip,\n  };\n}\n\nexport function createComputerPlayer() {\n  const player = createPlayer('Computer', playerType.COMPUTER);\n  let prioritizedTiles = [];\n\n  const isTileInBounds = function isTileInBounds(row, col) {\n    return row >= 0 && row < NUM_OF_ROWS && col >= 0 && col < NUM_OF_COLUMNS;\n  };\n\n  const getPrioritizedTile = function getPrioritizedTile(infoBoard) {\n    while (prioritizedTiles.length > 0) {\n      const [row, col] = prioritizedTiles.pop();\n      if (infoBoard[row][col] === tileInfoType.UNKNOWN) {\n        return [row, col];\n      }\n    }\n\n    return null;\n  };\n\n  const getRandomTile = function getRandomTile(infoBoard) {\n    let row = getRandomInt(10);\n    let col = getRandomInt(10);\n\n    while (infoBoard[row][col] !== tileInfoType.UNKNOWN) {\n      row = getRandomInt(10);\n      col = getRandomInt(10);\n    }\n\n    return [row, col];\n  };\n\n  const getComputerAttack = function getComputerAttack(infoBoard) {\n    const prioritizedTile = getPrioritizedTile(infoBoard);\n\n    if (prioritizedTile) {\n      return prioritizedTile;\n    }\n\n    return getRandomTile(infoBoard);\n  };\n\n  const getTilesOrderedByPriority = function getTilesOrderedByPriority(\n    row,\n    col,\n    infoBoard,\n  ) {\n    const directions = shuffleArray([\n      [0, 1],\n      [1, 0],\n      [-1, 0],\n      [0, -1],\n    ]);\n\n    const tilesOrderedByPriority = [];\n\n    for (const [dRow, dCol] of directions) {\n      const newRow = row + dRow;\n      const newCol = col + dCol;\n\n      if (\n        isTileInBounds(newRow, newCol) &&\n        infoBoard[newRow][newCol] === tileInfoType.UNKNOWN\n      ) {\n        const oppositeRow = row - dRow;\n        const oppositeCol = col - dCol;\n\n        /* If the tile on the other side of the attacked tile is also a hit we\n        should keep attacking in this direction, therefore prioritize. */\n        if (\n          isTileInBounds(oppositeRow, oppositeCol) &&\n          infoBoard[oppositeRow][oppositeCol] === tileInfoType.HIT\n        ) {\n          tilesOrderedByPriority.push([newRow, newCol]);\n        } else {\n          tilesOrderedByPriority.unshift([newRow, newCol]);\n        }\n      }\n    }\n    return tilesOrderedByPriority;\n  };\n\n  const updateLastAttack = function updateLastAttack(\n    row,\n    col,\n    sunk,\n    infoBoard,\n  ) {\n    if (sunk) {\n      prioritizedTiles = [];\n    } else if (infoBoard[row][col] === tileInfoType.HIT) {\n      const tiles = getTilesOrderedByPriority(row, col, infoBoard);\n      prioritizedTiles.push(...tiles);\n    } else {\n      // We shuffle on miss as we don't want to keep attacking in same area\n      prioritizedTiles = shuffleArray(prioritizedTiles);\n    }\n  };\n\n  return { ...player, getComputerAttack, updateLastAttack };\n}\n","import { NUM_OF_COLUMNS, NUM_OF_ROWS } from '../constants';\nimport { tileInfoType } from '../types';\n\nexport function createGameboard() {\n  let shipData = {};\n\n  let board = new Array(NUM_OF_ROWS)\n    .fill(null)\n    .map(() => new Array(NUM_OF_COLUMNS).fill(null));\n\n  const infoBoard = new Array(NUM_OF_ROWS)\n    .fill(null)\n    .map(() => new Array(NUM_OF_COLUMNS).fill(tileInfoType.UNKNOWN));\n\n  const getShip = function getShip(row, col) {\n    return board[row][col];\n  };\n\n  const isValidPlacement = function isValidPlacement(\n    ship,\n    row,\n    col,\n    isVertical,\n  ) {\n    const shipLength = ship.getLength();\n    if (isVertical) {\n      if (row + shipLength > NUM_OF_ROWS) {\n        return false;\n      }\n    } else if (col + shipLength > NUM_OF_COLUMNS) {\n      return false;\n    }\n\n    // Check for overlap with existing ships\n    for (let i = 0; i < shipLength; i++) {\n      const currentRow = isVertical ? row + i : row;\n      const currentCol = isVertical ? col : col + i;\n\n      // Only null tiles allowed unless the ship is being moved onto itself\n      if (![ship, null].includes(board[currentRow][currentCol])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const setShip = function setShip(ship, row, col, isVertical) {\n    const shipLength = ship.getLength();\n\n    for (let i = 0; i < shipLength; i++) {\n      const currentRow = isVertical ? row + i : row;\n      const currentCol = isVertical ? col : col + i;\n\n      board[currentRow][currentCol] = ship;\n    }\n\n    shipData[ship.getType()] = {\n      ship,\n      row,\n      col,\n      isVertical,\n    };\n  };\n\n  const getInfoBoard = function getInfoBoard() {\n    return infoBoard.map((row) => [...row]);\n  };\n\n  const getTileInfo = function getTileInfo(row, col) {\n    return infoBoard[row][col];\n  };\n\n  const receiveAttack = function receiveAttack(row, col) {\n    if (!board[row][col]) {\n      infoBoard[row][col] = tileInfoType.MISSED;\n    } else {\n      board[row][col].hit();\n      infoBoard[row][col] = tileInfoType.HIT;\n    }\n  };\n\n  const isFleetSunk = function isFleetSunk() {\n    return Object.values(shipData).every((entry) => entry.ship.isSunk());\n  };\n\n  const getInitialPosition = function getInitialPosition(shipType) {\n    if (!shipData[shipType]) {\n      return undefined;\n    }\n\n    const ship = shipData[shipType];\n    return {\n      row: ship.row,\n      col: ship.col,\n      isVertical: ship.isVertical,\n    };\n  };\n\n  const removeShip = function removeShip(targetedRow, targetedCol) {\n    if (board[targetedRow][targetedCol] === null) {\n      throw new Error('Cannot remove ship, no ship exists at location');\n    }\n\n    const shipType = board[targetedRow][targetedCol].getType();\n    const { ship, row, col, isVertical } = shipData[shipType];\n    const shipLength = ship.getLength();\n\n    for (let i = 0; i < shipLength; i++) {\n      const currentRow = isVertical ? row + i : row;\n      const currentCol = isVertical ? col : col + i;\n\n      board[currentRow][currentCol] = null;\n    }\n\n    delete shipData[shipType];\n  };\n\n  const removeAllShips = function removeAllShips() {\n    board = new Array(NUM_OF_ROWS)\n      .fill(null)\n      .map(() => new Array(NUM_OF_COLUMNS).fill(null));\n    shipData = {};\n  };\n\n  const getAllShips = function getAllShips() {\n    return Object.values(shipData).reduce((ships, data) => {\n      ships.push(data.ship);\n      return ships;\n    }, []);\n  };\n\n  return {\n    getAllShips,\n    getShip,\n    setShip,\n    getInfoBoard,\n    getTileInfo,\n    receiveAttack,\n    isFleetSunk,\n    isValidPlacement,\n    getInitialPosition,\n    removeShip,\n    removeAllShips,\n  };\n}\n","export const shipSize = Object.freeze({\n  'carrier': 5,\n  'battleship': 4,\n  'destroyer': 3,\n  'submarine': 3,\n  'patrol-boat': 2,\n});\n\nexport function createShip(shipType) {\n  const length = shipSize[shipType];\n  if (!length) {\n    throw new Error('Invalid ship type');\n  }\n\n  let hits = 0;\n\n  const getLength = function getLength() {\n    return length;\n  };\n\n  const getType = function getType() {\n    return shipType;\n  };\n\n  const isSunk = function isSunk() {\n    return hits === length;\n  };\n\n  const hit = function hit() {\n    if (!isSunk()) {\n      hits += 1;\n    }\n  };\n\n  return { getLength, isSunk, hit, getType };\n}\n","import { NUM_OF_COLUMNS, NUM_OF_ROWS } from './constants';\nimport { formFieldType, shipType, tileInfoType } from './types';\n\nconst planningModal = document.querySelector('.planning-modal');\nconst planningForm = document.querySelector('.planning-modal > form');\nconst player1Board = document.querySelector('.player-1.gameboard');\nconst player2Board = document.querySelector('.player-2.gameboard');\nconst buttons = document.querySelector('.content .buttons');\nconst planningShips = document.querySelector(`#${formFieldType.SHIPS}`);\nconst planningBoard = document.querySelector(`.planning-modal .gameboard`);\nconst computerRadioBtn = document.querySelector('#computer');\nconst playerRadioBtn = document.querySelector('#player');\n\nconst createButton = function createButton(text, className) {\n  const button = document.createElement('button');\n  button.type = 'button';\n  button.textContent = text;\n  button.classList.add('btn', className);\n\n  return button;\n};\n\nconst forEachGridCell = function forEachGridCell(callback) {\n  for (let row = 0; row < NUM_OF_ROWS; row++) {\n    for (let col = 0; col < NUM_OF_COLUMNS; col++) {\n      callback(row, col);\n    }\n  }\n};\n\nconst createGridCell = function createGridCellElement(row, col) {\n  const cell = document.createElement('div');\n  cell.dataset.row = row;\n  cell.dataset.col = col;\n  cell.classList.add('grid-cell');\n  cell.style.gridArea = `${row + 1} / ${col + 1} / span 1 / span 1`;\n  return cell;\n};\n\ndocument.querySelectorAll('.gameboard').forEach((grid) => {\n  forEachGridCell((row, col) => {\n    const gridCell = createGridCell(row, col);\n    grid.appendChild(gridCell);\n  });\n});\n\nconst getBoard = function getPlayersBoard(isPlayer1) {\n  return isPlayer1 ? player1Board : player2Board;\n};\n\nconst renderPlayerShips = function renderPlayerShips(isPlayer1, player) {\n  const board = getBoard(isPlayer1);\n\n  forEachGridCell((row, col) => {\n    const tile = board.querySelector(`[data-row=\"${row}\"][data-col=\"${col}\"]`);\n\n    if (player.getShip(row, col) && !player.getShip(row, col).isSunk()) {\n      tile.classList.add('ship-cell');\n    }\n  });\n};\n\nconst hidePlayerShips = function hidePlayerShips(isPlayer1, player) {\n  const board = getBoard(isPlayer1);\n\n  forEachGridCell((row, col) => {\n    const tile = board.querySelector(`[data-row=\"${row}\"][data-col=\"${col}\"]`);\n\n    if (player.getShip(row, col)) {\n      tile.classList.remove('ship-cell');\n    }\n  });\n};\n\nconst renderSunkenShip = function renderSunkenShip(\n  isPlayer1,\n  row,\n  col,\n  isVertical,\n  shipLength,\n) {\n  const board = getBoard(isPlayer1);\n\n  for (let i = 0; i < shipLength; i++) {\n    const currentRow = isVertical ? row + i : row;\n    const currentCol = isVertical ? col : col + i;\n\n    const tile = board.querySelector(\n      `[data-row=\"${currentRow}\"][data-col=\"${currentCol}\"]`,\n    );\n    tile.classList.add('sunken');\n    tile.classList.remove('hit-cell');\n  }\n};\n\nconst receiveAttack = function renderReceiveAttack(\n  row,\n  col,\n  tileInfo,\n  isPlayer1Turn,\n) {\n  const attackedBoard = isPlayer1Turn ? player2Board : player1Board;\n  const tile = attackedBoard.querySelector(\n    `[data-row=\"${row}\"][data-col=\"${col}\"]`,\n  );\n  tile.classList.add(tileInfo === tileInfoType.HIT ? 'hit-cell' : 'miss-cell');\n};\n\nconst setStatusMessage = function setStatusMessage(msg) {\n  document.querySelector('.status').textContent = msg;\n};\n\nconst resetPlayerBoards = function resetAllPlayerBoards() {\n  const playerBoards = [player1Board, player2Board];\n\n  forEachGridCell((row, col) => {\n    playerBoards.forEach((board) => {\n      const tile = board.querySelector(\n        `[data-row=\"${row}\"][data-col=\"${col}\"]`,\n      );\n      tile.classList = 'grid-cell';\n    });\n  });\n};\n\nconst setGameplayButtons = function setGameplayButtons(...gameButtons) {\n  buttons.replaceChildren(...gameButtons);\n};\n\nconst setShipSize = function setShipContainerSize(\n  shipElement,\n  row,\n  col,\n  isVertical,\n  length,\n) {\n  shipElement.style.gridRowStart = `${row + 1}`;\n  shipElement.style.gridColumnStart = `${col + 1}`;\n\n  if (isVertical) {\n    shipElement.classList.add('vertical');\n    shipElement.style.gridRowEnd = `span ${length}`;\n    shipElement.style.gridColumnEnd = 'span 1';\n  } else {\n    shipElement.classList.remove('vertical');\n    shipElement.style.gridRowEnd = 'span 1';\n    shipElement.style.gridColumnEnd = `span ${length}`;\n  }\n};\n\nconst createShipDragImage = function createShipDragImage(\n  shipElement,\n  isVertical,\n  length,\n) {\n  const dragImage = shipElement.cloneNode(true);\n  dragImage.classList.add('drag-image');\n\n  setShipSize(dragImage, 0, 0, isVertical, length);\n\n  planningBoard.appendChild(dragImage);\n};\n\nconst getShipDragImage = function getShipDragImage(shipType) {\n  return document.querySelector(`.drag-image[data-type=\"${shipType}\"]`);\n};\n\nconst createShip = function createShipContainer(type, length) {\n  const shipContainer = document.createElement('div');\n  shipContainer.dataset.type = `${type}`;\n  shipContainer.classList.add('ship-container');\n\n  for (let i = 0; i < length; i++) {\n    shipContainer.appendChild(document.createElement('div'));\n  }\n  createShipDragImage(shipContainer, false, length);\n\n  shipContainer.draggable = true;\n  shipContainer.classList.add('planning-ship');\n  planningShips.appendChild(shipContainer);\n};\n\nconst placeShip = function placeShipContainer(\n  row,\n  col,\n  isVertical,\n  type,\n  length,\n) {\n  const shipSelector = `.planning-ship[data-type=\"${type}\"]`;\n  const shipElement = document.querySelector(shipSelector);\n\n  // When the ship isn't placed on the board yet, (first placement)\n  if (!planningBoard.querySelector(shipSelector)) {\n    planningBoard.appendChild(shipElement);\n  }\n\n  setShipSize(shipElement, row, col, isVertical, length);\n  setShipSize(getShipDragImage(type), 0, 0, isVertical, length);\n};\n\nconst removeDraggableShips = function removeDraggableShips() {\n  document.querySelectorAll('.ship-container').forEach((ele) => {\n    ele.remove();\n  });\n};\n\nconst createShipInsertionMarker = function createShipInsertionMarker(\n  shipElement,\n) {\n  const marker = shipElement.cloneNode(true);\n  marker.id = 'insertion-marker';\n  marker.draggable = false;\n  marker.classList.remove('planning-ship');\n\n  planningBoard.appendChild(marker);\n};\n\nconst setInsertionMarkerSize = function setShipInsertionMarkerSize(\n  marker,\n  isVertical,\n  rowEnd,\n  colEnd,\n  length,\n) {\n  const markerEnd = isVertical ? rowEnd : colEnd;\n  const maxCells = isVertical ? NUM_OF_ROWS + 1 : NUM_OF_COLUMNS + 1;\n\n  // If the marker's end exceeds the grid, resize the marker\n  const markerLength =\n    markerEnd > maxCells ? length - (markerEnd - maxCells) : length;\n\n  const markerCells = [];\n  for (let i = 0; i < markerLength; i++) {\n    markerCells.push(document.createElement('div'));\n  }\n  marker.replaceChildren(...markerCells);\n};\n\nconst moveShipInsertionMarker = function moveShipInsertionMarker(\n  row,\n  col,\n  isValid,\n  length,\n  isVertical,\n) {\n  const marker = document.querySelector('#insertion-marker');\n  marker.classList.add('active');\n\n  const computedStyle = window.getComputedStyle(marker);\n  const currentRowStart = Number(computedStyle.gridRowStart);\n  const currentColStart = Number(computedStyle.gridColumnStart);\n\n  const rowSpan = isVertical ? length : 1;\n  const colSpan = !isVertical ? length : 1;\n\n  const rowEnd = row + rowSpan + 1;\n  const colEnd = col + colSpan + 1;\n\n  setInsertionMarkerSize(marker, isVertical, rowEnd, colEnd, length);\n\n  if (row !== currentRowStart - 1) {\n    marker.style.gridRow = `${row + 1} / ${Math.min(rowEnd, NUM_OF_ROWS + 1)}`;\n  }\n\n  if (col !== currentColStart - 1) {\n    marker.style.gridColumn = `${col + 1} / ${Math.min(colEnd, NUM_OF_COLUMNS + 1)}`;\n  }\n\n  if (!isValid) {\n    marker.classList.add('invalid');\n  } else {\n    marker.classList.remove('invalid');\n  }\n};\n\nconst getActiveDragImage = function getActiveDragImage() {\n  return document.querySelector('.drag-image.active');\n};\n\nconst getActiveDragImageType = function getActiveDragImageType() {\n  const dragImage = getActiveDragImage();\n  return dragImage ? dragImage.dataset.type : null;\n};\n\nconst hideShipInsertionMarker = function hideShipInsertionMarker() {\n  document.querySelector('#insertion-marker').classList.remove('active');\n};\n\nconst returnShip = function returnShipToSelectionArea(type, length) {\n  const shipSelector = `.planning-ship[data-type=\"${type}\"]`;\n  const shipElement = document.querySelector(shipSelector);\n\n  // Only add to ships when the ship is already placed on the board\n  if (!planningShips.querySelector(shipSelector)) {\n    planningShips.appendChild(shipElement);\n  }\n\n  shipElement.classList.remove('vertical');\n  shipElement.style.gridArea = '';\n  setShipSize(getActiveDragImage(), 0, 0, false, length);\n};\n\nconst showGameplayBoards = function showGameplayBoards(\n  player1Name,\n  player2Name,\n) {\n  document.querySelector('.gameplay-wrapper').classList.add('active');\n  document.querySelector('.player-1.player-name').textContent = player1Name;\n  document.querySelector('.player-2.player-name').textContent = player2Name;\n};\n\nconst setStatusPlayersTurn = function setStatusPlayersTurn(name) {\n  setStatusMessage(`${name}'s Turn`);\n};\n\nconst resetFormFields = function resetFormFields() {\n  planningForm.name.value = '';\n  computerRadioBtn.checked = true;\n  computerRadioBtn.disabled = false;\n  playerRadioBtn.disabled = false;\n};\n\nconst disableOpponentField = function disableOpponentField() {\n  playerRadioBtn.checked = true;\n  computerRadioBtn.disabled = true;\n  playerRadioBtn.disabled = true;\n};\n\nconst removeFormErrors = function removeFormErrors(formFieldType) {\n  document.querySelector(`#${formFieldType}`).classList.remove('invalid');\n  document.querySelector(`#${formFieldType} + .error`).textContent = '';\n};\n\nconst isFormValid = function isFormValid() {\n  return planningForm.name.validity.valid && planningForm.opponent.value !== '';\n};\n\nconst isFieldMarkedInvalid = function isFieldMarkedInvalid(formFieldType) {\n  return (\n    document.querySelector(`#${formFieldType} + .error`).textContent !== ''\n  );\n};\n\nconst showFormErrors = function showFormErrors(isShipsInvalid) {\n  if (planningForm.name.validity.valueMissing) {\n    planningForm.name.classList.add('invalid');\n    document.querySelector('#name + .error').textContent =\n      'Please fill in required field.';\n  }\n\n  if (planningForm.opponent.value === '') {\n    document.querySelector('fieldset + .error').textContent =\n      'Please fill in required field.';\n  }\n\n  if (isShipsInvalid) {\n    planningShips.classList.add('invalid');\n    document.querySelector('#planning-ships + .error').textContent =\n      'Please place all ships onto the board.';\n  }\n};\n\nconst getFormData = function getFormData() {\n  return {\n    name: planningForm.name.value,\n    opponent: planningForm.opponent.value,\n  };\n};\n\nconst renderGameOver = function renderGameOver(isPlayer1, winningPlayer) {\n  setStatusMessage(`${winningPlayer.getName()} wins!`);\n  setGameplayButtons(createButton('Play Again', 'play-again'));\n\n  renderPlayerShips(isPlayer1, winningPlayer);\n};\n\nconst resetPlanningFormData = function resetPlanningFormData() {\n  resetFormFields();\n  removeDraggableShips();\n};\n\nconst resetPlanningModal = function resetPlanningModal() {\n  resetPlanningFormData();\n\n  for (const shipInfo of Object.values(shipType)) {\n    createShip(shipInfo.type, shipInfo.length);\n  }\n};\n\nconst renderPlayer1PlanningForm = function renderPlayer1PlanningForm() {\n  resetPlanningModal();\n  planningModal.showModal();\n};\n\nconst renderPlayer2PlanningForm = function renderPlayer2PlanningForm() {\n  resetPlanningModal();\n  disableOpponentField();\n};\n\nconst renderGameplayBoards = function renderGameplayBoards(\n  player1Name,\n  player2Name,\n) {\n  setStatusMessage('');\n  resetPlayerBoards();\n  resetPlanningFormData();\n  showGameplayBoards(player1Name, player2Name);\n};\n\nconst renderComputerGame = function renderComputerGame(\n  player1,\n  player1Name,\n  player2Name,\n) {\n  renderGameplayBoards(player1Name, player2Name);\n  renderPlayerShips(true, player1);\n  setGameplayButtons(createButton('Concede', 'concede'));\n};\n\nconst renderPlayerGame = function renderPlayerGame(player1Name, player2Name) {\n  renderGameplayBoards(player1Name, player2Name);\n\n  const concedeBtn = createButton('Concede', 'concede');\n  concedeBtn.disabled = true;\n  setGameplayButtons(createButton('Ready', 'ready'), concedeBtn);\n  setStatusPlayersTurn(player1Name);\n};\n\nconst renderReadyView = function renderReadyView(\n  isPlayer1,\n  lastPlayer,\n  currentPlayerName,\n) {\n  document.querySelector('.ready').disabled = false;\n  document.querySelector('.concede').disabled = true;\n  setStatusPlayersTurn(currentPlayerName);\n  hidePlayerShips(isPlayer1, lastPlayer);\n};\n\nconst renderActivePlayer = function renderActivePlayer(isPlayer1Turn, player) {\n  document.querySelector('.ready').disabled = true;\n  document.querySelector('.concede').disabled = false;\n  setStatusMessage(`Waiting for ${player.getName()} to attack...`);\n  renderPlayerShips(isPlayer1Turn, player);\n};\n\nconst renderShipDragStart = function renderShipDragStart(\n  shipContainer,\n  dragImage,\n) {\n  createShipInsertionMarker(shipContainer);\n  dragImage.classList.add('active');\n};\n\nconst renderShipDragEnd = function renderShipDragEnd() {\n  document.querySelector('#insertion-marker').remove();\n  getActiveDragImage().classList.remove('active');\n};\n\nconst setTheme = function setTheme(theme) {\n  document.documentElement.className = theme;\n};\n\nconst toggleDarkMode = function toggleDarkMode() {\n  document.querySelector('#dark-mode').checked = true;\n  setTheme('dark');\n};\n\nconst isDarkModeToggled = function isDarkModeToggled() {\n  return document.querySelector('#dark-mode').checked;\n};\n\nconst closePlanningModal = function closePlanningModal() {\n  planningModal.close();\n};\n\n// Binders below\nconst bindGameboards = function bindGameboardsHandlers(handlers) {\n  [player1Board, player2Board].forEach((gameboard) => {\n    gameboard.addEventListener('click', (event) => {\n      if (event.target.classList.contains('grid-cell')) {\n        handlers.receiveAttack(event);\n      }\n    });\n  });\n\n  planningBoard.addEventListener('click', (event) => {\n    if (event.target.classList.contains('ship-container')) {\n      handlers.rotate(event);\n    }\n  });\n};\n\nconst bindButtons = function bindGameplayButtonHandlers(handlers) {\n  buttons.addEventListener('click', (event) => {\n    if (\n      event.target.classList.contains('start-game') ||\n      event.target.classList.contains('play-again')\n    ) {\n      handlers.start();\n    } else if (event.target.classList.contains('ready')) {\n      handlers.ready();\n    } else if (event.target.classList.contains('concede')) {\n      handlers.concede();\n    }\n  });\n};\n\nconst bindDragAndDrop = function bindDragAndDropHandlers(handlers) {\n  // Ships\n  planningShips.addEventListener('dragover', handlers.shipsDragoverHandler);\n\n  // Planning Board\n  planningBoard.addEventListener('dragleave', handlers.dragleaveHandler);\n  planningBoard.addEventListener('dragover', (event) => {\n    if (event.target.classList.contains('gameboard')) {\n      handlers.gapDragoverHandler();\n    } else if (event.target.classList.contains('grid-cell')) {\n      handlers.gridCellDragoverHandler(event);\n    }\n  });\n\n  // Planning Modal\n  planningModal.addEventListener('dragstart', (event) => {\n    if (\n      event.target.tagName === 'DIV' &&\n      event.target.classList.contains('ship-container')\n    ) {\n      handlers.dragstartHandler(event);\n    }\n  });\n  planningModal.addEventListener('dragend', (event) => {\n    if (\n      event.target.tagName === 'DIV' &&\n      event.target.classList.contains('ship-container')\n    ) {\n      handlers.dragendHandler();\n    }\n  });\n  planningModal.addEventListener('drop', (event) => {\n    if (event.target.classList.contains('grid-cell')) {\n      handlers.boardDropHandler(event);\n    } else if (event.target.id === `${formFieldType.SHIPS}`) {\n      handlers.shipsDropHandler(event);\n    }\n  });\n};\n\nconst bindModalButtons = function bindModalButtonHandlers(handlers) {\n  planningModal.addEventListener('submit', (event) => {\n    handlers.submit(event);\n  });\n\n  planningModal.addEventListener('click', (event) => {\n    if (event.target.classList.contains('randomize')) {\n      handlers.randomize();\n    } else if (event.target.classList.contains('close')) {\n      handlers.close();\n    }\n  });\n};\n\nconst bindNameField = function bindNameFieldHandler(handler) {\n  document\n    .querySelector(`#${formFieldType.NAME}`)\n    .addEventListener('input', handler);\n};\n\nconst bindOpponentField = function bindOpponentFieldHandler(handler) {\n  document\n    .querySelector(`#${formFieldType.OPPONENT}`)\n    .addEventListener('change', handler);\n};\n\nconst bindDarkModeToggle = function bindDarkModeToggle(handler) {\n  document.querySelector('#dark-mode').addEventListener('change', handler);\n};\n\nexport const view = {\n  bindButtons,\n  bindDragAndDrop,\n  bindGameboards,\n  bindNameField,\n  bindOpponentField,\n  removeFormErrors,\n  isFieldMarkedInvalid,\n  setTheme,\n  bindModalButtons,\n  getActiveDragImageType,\n  getShipDragImage,\n  hideShipInsertionMarker,\n  moveShipInsertionMarker,\n  placeShip,\n  showFormErrors,\n  isFormValid,\n  receiveAttack,\n  renderSunkenShip,\n  returnShip,\n  renderGameOver,\n  renderPlayer1PlanningForm,\n  renderPlayer2PlanningForm,\n  renderComputerGame,\n  renderPlayerGame,\n  renderReadyView,\n  renderActivePlayer,\n  renderShipDragStart,\n  renderShipDragEnd,\n  getFormData,\n  bindDarkModeToggle,\n  toggleDarkMode,\n  isDarkModeToggled,\n  closePlanningModal,\n};\n\nexport function getXYOffsets(ship) {\n  const isVertical = ship.classList.contains('vertical');\n\n  // Divide main axis by 2 x number of nodes to get center of the first cell\n  const xDenominator = isVertical ? 2 : Number(ship.childElementCount) * 2;\n  const yDenominator = !isVertical ? 2 : Number(ship.childElementCount) * 2;\n\n  return {\n    offsetX: Number(ship.offsetWidth) / xDenominator,\n    offsetY: Number(ship.offsetHeight) / yDenominator,\n  };\n}\n","import { SHIP_TYPES } from './constants';\nimport { createComputerPlayer, createPlayer } from './model/player';\nimport { createShip } from './model/ship';\nimport { formFieldType, playerType, shipType, tileInfoType } from './types';\nimport { getRandomInt } from './utils/random';\nimport { getXYOffsets, view } from './view';\n\nlet player1, player2;\nlet isGameInProgress = false;\nlet isPlayer1Turn = true;\n\nconst getPlayer = function getPlayer(isPlayer1) {\n  return isPlayer1 ? player1 : player2;\n};\n\n/**\n * Handles the logic of a player attacking during their turn. This includes\n * updating the models and updating the view. Additionally if a ship is sunk\n * or the game is over, it'll report that on the view and update internal\n * logic to prevent further moves.\n *\n * @param {Object} attackedPlayer - The player being attacked\n * @param {number} row - The row being attacked\n * @param {number} col - The column being attacked\n */\nconst playerTurn = function playerTurn(attackedPlayer, row, col) {\n  const attackingPlayer = getPlayer(isPlayer1Turn);\n  attackedPlayer.receiveAttack(row, col);\n\n  const attackedTile = attackedPlayer.getTileInfo(row, col);\n  view.receiveAttack(row, col, attackedTile, isPlayer1Turn);\n\n  if (\n    attackedTile === tileInfoType.HIT &&\n    attackedPlayer.getShip(row, col).isSunk()\n  ) {\n    const ship = attackedPlayer.getShip(row, col);\n    const positionData = attackedPlayer.getInitialPosition(ship.getType());\n\n    view.renderSunkenShip(\n      !isPlayer1Turn,\n      positionData.row,\n      positionData.col,\n      positionData.isVertical,\n      ship.getLength(),\n    );\n  }\n\n  if (attackedPlayer.isFleetSunk()) {\n    view.renderGameOver(isPlayer1Turn, attackingPlayer);\n    isGameInProgress = false;\n  }\n\n  isPlayer1Turn = !isPlayer1Turn;\n};\n\nconst placeShipRandomly = function placeShipRandomly(player, ship) {\n  let row = getRandomInt(10);\n  let col = getRandomInt(10);\n  let isVertical = getRandomInt(2) === 0;\n\n  while (!player.isValidPlacement(ship, row, col, isVertical)) {\n    row = getRandomInt(10);\n    col = getRandomInt(10);\n    isVertical = getRandomInt(2) === 0;\n  }\n\n  player.setShip(ship, row, col, isVertical);\n  view.placeShip(row, col, isVertical, ship.getType(), ship.getLength());\n};\n\nconst randomizeBoard = (player) => {\n  for (const shipInfo of Object.values(shipType)) {\n    placeShipRandomly(player, createShip(shipInfo.type));\n  }\n};\n\n/**\n * Handler function for a board being attacked. It will take the coordinates\n * of the tile being attacked, along with a boolean that represents if it's\n * player 1 being attacked.\n *\n * @param {number} row - The row being attacked\n * @param {number} col - The column being attacked\n * @param {boolean} isPlayer1Attacked - true if player 1 is being attacked\n */\nconst receiveAttackHandler = function receiveAttackHandler(event) {\n  const isPlayer1Attacked = event.currentTarget.classList.contains('player-1');\n  const row = event.target.dataset.row;\n  const col = event.target.dataset.col;\n\n  const isPlayer2Computer = player2.getType() === playerType.COMPUTER;\n  if (\n    (isPlayer1Attacked && isPlayer2Computer) ||\n    isPlayer1Attacked === isPlayer1Turn ||\n    !isGameInProgress\n  ) {\n    return;\n  }\n  const attackedPlayer = getPlayer(isPlayer1Attacked);\n\n  if (attackedPlayer.getTileInfo(row, col) !== tileInfoType.UNKNOWN) {\n    return;\n  }\n\n  playerTurn(attackedPlayer, row, col);\n\n  // If attacked player's entire fleet is sunk, end game\n  if (!isGameInProgress) {\n    return;\n  }\n\n  if (isPlayer2Computer) {\n    const [computerRow, computerCol] = player2.getComputerAttack(\n      player1.getInfoBoard(),\n    );\n    playerTurn(player1, computerRow, computerCol);\n\n    const attackedShip = player1.getShip(computerRow, computerCol);\n    player2.updateLastAttack(\n      computerRow,\n      computerCol,\n      attackedShip && attackedShip.isSunk(),\n      player1.getInfoBoard(),\n    );\n  } else {\n    const attackingPlayer = getPlayer(!isPlayer1Turn);\n    view.renderReadyView(\n      !isPlayer1Turn,\n      attackingPlayer,\n      attackedPlayer.getName(),\n    );\n    isGameInProgress = false;\n  }\n};\n\nconst randomizeShipsHandler = function randomizeShipsHandler() {\n  const player = getPlayer(isPlayer1Turn);\n  player.removeAllShips();\n  randomizeBoard(player);\n\n  if (view.isFieldMarkedInvalid(formFieldType.SHIPS)) {\n    view.removeFormErrors(formFieldType.SHIPS);\n  }\n};\n\nconst startGameHandler = function startGameHandler() {\n  view.renderPlayer1PlanningForm();\n  player1 = createPlayer('Player', playerType.HUMAN);\n  player2 = undefined;\n  isPlayer1Turn = true;\n};\n\nconst dragstartHandler = function dragstartHandler(event) {\n  const shipContainer = event.target;\n  const { offsetX, offsetY } = getXYOffsets(shipContainer);\n  const dragImage = view.getShipDragImage(shipContainer.dataset.type);\n\n  event.dataTransfer.setData('text/plain', shipContainer.dataset.type);\n  event.dataTransfer.setDragImage(dragImage, offsetX, offsetY);\n  event.dataTransfer.dropEffect = 'move';\n\n  // This sucks. This is a workaround due to a long existing bug in chrome.\n  // If you manipulate DOM nodes during the 'dragstart' event, chrome\n  // immediately fires the 'dragend' event. It's ridiculous that this\n  // issue exists at least as far back as 2013. The drag and drop API spec\n  // is awful in general. https://stackoverflow.com/questions/11927309\n  setTimeout(() => {\n    view.renderShipDragStart(shipContainer, dragImage);\n  }, 0);\n};\n\nconst dragendHandler = function dragendHandler() {\n  view.renderShipDragEnd();\n};\n\nconst shipsDragoverHandler = function shipsDragoverHandler(event) {\n  const shipType = view.getActiveDragImageType();\n  if (!shipType) {\n    return;\n  }\n\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'move';\n};\n\nconst gapDragoverHandler = function boardGapDragoverHandler() {\n  const shipType = view.getActiveDragImageType();\n  if (!shipType) {\n    return;\n  }\n\n  view.hideShipInsertionMarker();\n};\n\nconst gridCellDragoverHandler = function gridCellDragoverHandler(event) {\n  const shipType = view.getActiveDragImageType();\n  if (!shipType) {\n    return;\n  }\n\n  event.preventDefault();\n  event.dataTransfer.dropEffect = 'move';\n\n  const player = getPlayer(isPlayer1Turn);\n  const newRow = Number(event.target.dataset.row);\n  const newCol = Number(event.target.dataset.col);\n  const positionData = player.getInitialPosition(shipType);\n  let ship, isVertical;\n\n  if (!positionData) {\n    ship = createShip(shipType);\n    isVertical = false;\n  } else {\n    ship = player.getShip(positionData.row, positionData.col);\n    isVertical = positionData.isVertical;\n  }\n  const isValid = player.isValidPlacement(ship, newRow, newCol, isVertical);\n\n  view.moveShipInsertionMarker(\n    newRow,\n    newCol,\n    isValid,\n    ship.getLength(),\n    isVertical,\n  );\n};\n\nconst dragleaveHandler = function dragleaveHandler() {\n  if (!view.getActiveDragImageType()) {\n    return;\n  }\n\n  view.hideShipInsertionMarker();\n};\n\nconst boardDropHandler = function boardDropHandler(event) {\n  const shipType = event.dataTransfer.getData('text/plain');\n  if (!SHIP_TYPES.includes(shipType)) {\n    return;\n  }\n\n  event.preventDefault();\n\n  const player = getPlayer(isPlayer1Turn);\n  const positionData = player.getInitialPosition(shipType);\n  const newRow = Number(event.target.dataset.row);\n  const newCol = Number(event.target.dataset.col);\n  let ship, isVertical;\n\n  // If new ship, else move existing ship\n  if (!positionData) {\n    ship = createShip(shipType);\n    isVertical = false;\n  } else {\n    ship = player.getShip(positionData.row, positionData.col);\n    isVertical = positionData.isVertical;\n  }\n\n  if (player.isValidPlacement(ship, newRow, newCol, isVertical)) {\n    if (positionData) {\n      player.removeShip(positionData.row, positionData.col);\n    }\n    player.setShip(ship, newRow, newCol, isVertical);\n    view.placeShip(\n      newRow,\n      newCol,\n      isVertical,\n      ship.getType(),\n      ship.getLength(),\n    );\n\n    if (\n      player.getAllShips().length === 5 &&\n      view.isFieldMarkedInvalid(formFieldType.SHIPS)\n    ) {\n      view.removeFormErrors(formFieldType.SHIPS);\n    }\n  }\n};\n\nconst shipsDropHandler = function shipsDropHandler(event) {\n  const shipType = event.dataTransfer.getData('text/plain');\n  if (!SHIP_TYPES.includes(shipType)) {\n    return;\n  }\n\n  event.preventDefault();\n\n  const player = getPlayer(isPlayer1Turn);\n  const positionData = player.getInitialPosition(shipType);\n\n  // Only need to 'return' ship if it's been placed previously\n  if (positionData) {\n    const ship = createShip(shipType);\n    player.removeShip(positionData.row, positionData.col);\n    view.returnShip(ship.getType(), ship.getLength());\n  }\n};\n\nconst rotateShipHandler = function rotateShipHandler(event) {\n  const shipType = event.target.dataset.type;\n  const player = getPlayer(isPlayer1Turn);\n  const { row, col, isVertical } = player.getInitialPosition(shipType);\n  const ship = player.getShip(row, col);\n\n  if (player.isValidPlacement(ship, row, col, !isVertical)) {\n    player.removeShip(row, col);\n    player.setShip(ship, row, col, !isVertical);\n    view.placeShip(row, col, !isVertical, ship.getType(), ship.getLength());\n  }\n};\n\nconst submitHandler = function submitHandler(event) {\n  const { name, opponent } = view.getFormData();\n  const player = getPlayer(isPlayer1Turn);\n\n  if (view.isFormValid() && player.getAllShips().length === 5) {\n    player.setName(name);\n\n    if (opponent === 'computer') {\n      isGameInProgress = true;\n      player2 = createComputerPlayer();\n      randomizeBoard(player2);\n      view.renderComputerGame(player1, player1.getName(), player2.getName());\n    } else {\n      isPlayer1Turn = !isPlayer1Turn;\n\n      // When player 1 submits, player2 is undefined\n      if (!player2) {\n        player2 = createPlayer('Player', playerType.HUMAN);\n        view.renderPlayer2PlanningForm();\n        event.preventDefault();\n      } else {\n        view.renderPlayerGame(player1.getName(), player2.getName());\n      }\n    }\n  } else {\n    view.showFormErrors(player.getAllShips().length !== 5);\n    event.preventDefault();\n  }\n};\n\nconst nameInputHandler = function nameInputHandler() {\n  if (view.isFieldMarkedInvalid(formFieldType.NAME)) {\n    view.removeFormErrors(formFieldType.NAME);\n  }\n};\n\nconst opponentInputHandler = function opponentInputHandler() {\n  if (view.isFieldMarkedInvalid(formFieldType.OPPONENT)) {\n    view.removeFormErrors(formFieldType.OPPONENT);\n  }\n};\n\nconst readyHandler = function readyHandler() {\n  const player = getPlayer(isPlayer1Turn);\n  view.renderActivePlayer(isPlayer1Turn, player);\n  isGameInProgress = true;\n};\n\nconst darkModeHandler = function darkModeToggleHandler() {\n  const newTheme = view.isDarkModeToggled() ? 'dark' : 'light';\n  view.setTheme(newTheme);\n  localStorage.setItem('theme', newTheme);\n};\n\nconst closeHandler = function closeHandler() {\n  view.closePlanningModal();\n};\n\nconst concedeHandler = function concedeHandler() {\n  const opponent = getPlayer(!isPlayer1Turn);\n  view.renderGameOver(!isPlayer1Turn, opponent);\n  isGameInProgress = false;\n};\n\nconst run = function run() {\n  // Gameboard interactions\n  view.bindGameboards({\n    receiveAttack: receiveAttackHandler,\n    rotate: rotateShipHandler,\n  });\n\n  // Button interactions\n  view.bindButtons({\n    start: startGameHandler,\n    ready: readyHandler,\n    concede: concedeHandler,\n  });\n\n  // Drag-and-drop interactions\n  view.bindDragAndDrop({\n    dragstartHandler,\n    dragendHandler,\n    gapDragoverHandler,\n    gridCellDragoverHandler,\n    boardDropHandler,\n    shipsDropHandler,\n    dragleaveHandler,\n    shipsDragoverHandler,\n  });\n\n  // Modal interactions\n  view.bindModalButtons({\n    randomize: randomizeShipsHandler,\n    submit: submitHandler,\n    close: closeHandler,\n  });\n\n  // Form inputs\n  view.bindNameField(nameInputHandler);\n  view.bindOpponentField(opponentInputHandler);\n\n  // Dark mode toggle\n  view.bindDarkModeToggle(darkModeHandler);\n\n  const theme = localStorage.getItem('theme');\n  if (!theme) {\n    localStorage.setItem('theme', 'light');\n  } else if (theme === 'dark') {\n    view.toggleDarkMode();\n  }\n};\n\nexport const controller = { run };\n","import 'normalize.css';\nimport '../css/style.css';\nimport { controller as app } from './controller';\n\napp.run();\n"],"names":["NUM_OF_ROWS","NUM_OF_COLUMNS","SHIP_TYPES","playerType","Object","freeze","HUMAN","Symbol","COMPUTER","shipInfo","type","length","shipType","CARRIER","BATTLESHIP","DESTROYER","SUBMARINE","PATROL_BOAT","tileInfoType","UNKNOWN","MISSED","HIT","formFieldType","SHIPS","NAME","OPPONENT","getRandomInt","max","Math","floor","random","shuffleArray","array","shuffledArray","slice","i","j","createPlayer","name","gameboard","shipData","board","Array","fill","map","infoBoard","getAllShips","values","reduce","ships","data","push","ship","getShip","row","col","setShip","isVertical","shipLength","getLength","currentCol","getType","getInfoBoard","getTileInfo","receiveAttack","hit","isFleetSunk","every","entry","isSunk","isValidPlacement","includes","getInitialPosition","removeShip","targetedRow","targetedCol","Error","removeAllShips","createGameboard","getName","setName","newName","arguments","undefined","getShipType","shipSize","createShip","hits","planningModal","document","querySelector","planningForm","player1Board","player2Board","buttons","planningShips","planningBoard","computerRadioBtn","playerRadioBtn","createButton","text","className","button","createElement","textContent","classList","add","forEachGridCell","callback","querySelectorAll","forEach","grid","gridCell","cell","dataset","style","gridArea","createGridCell","appendChild","getBoard","isPlayer1","renderPlayerShips","player","tile","setStatusMessage","msg","setGameplayButtons","replaceChildren","setShipSize","shipElement","gridRowStart","gridColumnStart","gridRowEnd","gridColumnEnd","remove","getShipDragImage","shipContainer","dragImage","cloneNode","createShipDragImage","draggable","getActiveDragImage","setStatusPlayersTurn","resetPlanningFormData","value","checked","disabled","ele","resetPlanningModal","renderGameplayBoards","player1Name","player2Name","playerBoards","resetPlayerBoards","showGameplayBoards","setTheme","theme","documentElement","view","shipSelector","winningPlayer","player1","player2","isGameInProgress","isPlayer1Turn","getPlayer","playerTurn","attackedPlayer","attackingPlayer","attackedTile","tileInfo","positionData","currentRow","placeShipRandomly","randomizeBoard","receiveAttackHandler","event","isPlayer1Attacked","currentTarget","contains","target","isPlayer2Computer","computerRow","computerCol","getComputerAttack","attackedShip","updateLastAttack","lastPlayer","currentPlayerName","hidePlayerShips","randomizeShipsHandler","startGameHandler","showModal","dragstartHandler","offsetX","offsetY","xDenominator","Number","childElementCount","yDenominator","offsetWidth","offsetHeight","getXYOffsets","dataTransfer","setData","setDragImage","dropEffect","setTimeout","marker","id","createShipInsertionMarker","dragendHandler","shipsDragoverHandler","preventDefault","gapDragoverHandler","gridCellDragoverHandler","newRow","newCol","isValid","computedStyle","window","getComputedStyle","currentRowStart","currentColStart","rowEnd","colEnd","markerEnd","maxCells","markerLength","markerCells","setInsertionMarkerSize","gridRow","min","gridColumn","dragleaveHandler","boardDropHandler","getData","shipsDropHandler","rotateShipHandler","submitHandler","opponent","isShipsInvalid","validity","valid","prioritizedTiles","isTileInBounds","prioritizedTile","pop","getPrioritizedTile","getRandomTile","sunk","tiles","directions","tilesOrderedByPriority","dRow","dCol","oppositeRow","oppositeCol","unshift","getTilesOrderedByPriority","createComputerPlayer","concedeBtn","valueMissing","nameInputHandler","opponentInputHandler","readyHandler","darkModeHandler","newTheme","localStorage","setItem","closeHandler","close","concedeHandler","handler","handlers","rotate","addEventListener","start","ready","concede","tagName","submit","randomize","getItem","app"],"sourceRoot":""}